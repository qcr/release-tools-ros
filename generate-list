#!/usr/bin/env python
from __future__ import print_function

import os
import sys
import re

path = os.path.dirname(os.path.realpath(__file__))

dependencies = {}
paths = {}

for package_dir in sys.argv[1:]:
  with open(os.path.join(path, package_dir, 'CMakeLists.txt')) as f:
    data = f.read()

    if 'cmake_minimum_required' not in data:
      continue
    
  with open(os.path.join(path, package_dir, 'package.xml')) as f:
    data = f.read()
    
    name = re.findall('<name>([^<]+)', data)[0]
    depends = re.findall('<[a-z_]*depend>([^<]+)', data)

    dependencies[name] = depends

    paths[name] = package_dir
    
package_names = list(dependencies.keys())

for package in dependencies:
  dependencies[package] = list(set(package_names).intersection(dependencies[package]))

package_names.sort(key=lambda x: len(dependencies[x]))

visited = []

while package_names:
  selected = package_names.pop(0)

  if len(dependencies[selected]) > 0:
    raise Exception('Something went wrong. Perhaps a circular dependency?')

  visited.append(selected)

  for package in dependencies:
    if selected in dependencies[package]:
      dependencies[package].remove(selected)

  package_names.sort(key= lambda x: len(dependencies[x]))

for name in visited:
  print(paths[name])