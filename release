#!/bin/bash

function handler {
  exit 1
}

function clean_up {
        fakeroot debian/rules clean
        find debian/ -not -name 'pre*' -not -name 'post*' -delete &>/dev/null
}

trap handler SIGINT

set_difference () {
   sort $1 $2 $2 | uniq -u
}

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
WORKSPACE="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

ln -s $PWD $WORKSPACE/src
ROS_PACKAGES=$(dirname $(find $WORKSPACE/src/ | grep package.xml$) 2>/dev/null)

ORDERED=$($WORKSPACE/generate-list $ROS_PACKAGES)


mkdir -p $WORKSPACE/target

if [ -e $WORKSPACE/target/robotics-sources.yaml ]; then
        rm $WORKSPACE/target/robotics-sources.yaml
fi

wget -O $WORKSPACE/target/robotics-sources.yaml https://raw.githubusercontent.com/qcr/package_lists/master/$(lsb_release -sc)/sources.yaml
sed -i "1iyaml file://$WORKSPACE/target/robotics-sources.yaml" /etc/ros/rosdep/sources.list.d/20-default.list

touch $WORKSPACE/target/local-sources.yaml

apt-get update

DATE=$(date "+%Y%m%d")
TIME=$(date "+%H%M%S")

for i in $ORDERED
do
	pushd $i

	PACKAGE_NAME=$(cat package.xml | grep -o "<name>[^<]*" | awk '{print substr($1,7)}')
	echo "Building $PACKAGE_NAME"

	rosdep update
	rosdep install -y --from-paths .

	bloom-generate rosdebian --place-template-files
	if [ -d templates ]; then
		for f in $(ls templates/); do if [[ "$f" == *.em ]]; then cp templates/$f debian/$f; fi; done;
	fi
	bloom-generate rosdebian --process-template-files

	if [ "$?" != "0" ]; then
		echo "Failed to build package in $i"
		clean_up
		exit 1
	fi

	sed -i "s/(\([^\)]*\)/(\1.$DATE.$TIME/" debian/changelog
	sed -i "s/-DCMAKE_INSTALL_PREFIX='\/opt\/ros\/$ROS_DISTRO'/-DCMAKE_INSTALL_PREFIX='\/opt\/ros\/$ROS_DISTRO' -DCMAKE_BUILD_TYPE=Release/g" debian/rules
	
	fakeroot debian/rules binary
	
	if [ "$?" != "0" ]; then
		echo "Failed to build package in $i"
		clean_up
		exit 1
	fi

	clean_up
	echo "Here: $PWD"
	cd ..
	echo "Now here: $PWD"
	ls -la

	ARTEFACT=$(ls | grep *.deb)
	APT_PACKAGE_NAME=$(dpkg --field $ARTEFACT | grep "Package: " | awk '{print $2}')

	dpkg --install $ARTEFACT

	$WORKSPACE/update-sources $WORKSPACE/target/robotics-sources.yaml $PACKAGE_NAME $APT_PACKAGE_NAME
	$WORKSPACE/update-sources $WORKSPACE/target/local-sources.yaml $PACKAGE_NAME $APT_PACKAGE_NAME
	
	mv *.deb $WORKSPACE/target/

	popd
done

chown -R 1000:1000 $WORKSPACE

